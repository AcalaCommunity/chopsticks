diff --git a/browser/data-source/DataSource.js b/browser/data-source/DataSource.js
index ac597a62857e6f05d1a7496ae9c49cdf6403c599..8a0530d03f0d51bca4c36bdb7e1a629683d4ab2f 100644
--- a/browser/data-source/DataSource.js
+++ b/browser/data-source/DataSource.js
@@ -13,6 +13,9 @@ import { ObjectUtils } from "../util/ObjectUtils";
 import { RelationIdLoader } from "../query-builder/RelationIdLoader";
 import { DriverUtils } from "../driver/DriverUtils";
 import { InstanceChecker } from "../util/InstanceChecker";
+import { registerQueryBuilders } from "../query-builder";
+
+registerQueryBuilders()
 /**
  * DataSource is a pre-defined connection configuration to a specific database.
  * You can have multiple data sources connected (with multiple connections in it),
diff --git a/browser/query-builder/QueryBuilder.js b/browser/query-builder/QueryBuilder.js
index 3fdc1a9b88b663c100562c073a2371b64c248b4a..f45f2db8c65f7aaf05ffb9e7c7e7d3da73a5e253 100644
--- a/browser/query-builder/QueryBuilder.js
+++ b/browser/query-builder/QueryBuilder.js
@@ -23,6 +23,7 @@ import { escapeRegExp } from "../util/escapeRegExp";
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
 export class QueryBuilder {
+    static queryBuilderRegistry = {}
     /**
      * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.
      */
@@ -71,10 +72,9 @@ export class QueryBuilder {
             ];
         }
         // loading it dynamically because of circular issue
-        const SelectQueryBuilderCls = require("./SelectQueryBuilder").SelectQueryBuilder;
         if (InstanceChecker.isSelectQueryBuilder(this))
             return this;
-        return new SelectQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["SelectQueryBuilder"](this);
     }
     /**
      * Creates INSERT query.
@@ -82,10 +82,9 @@ export class QueryBuilder {
     insert() {
         this.expressionMap.queryType = "insert";
         // loading it dynamically because of circular issue
-        const InsertQueryBuilderCls = require("./InsertQueryBuilder").InsertQueryBuilder;
         if (InstanceChecker.isInsertQueryBuilder(this))
             return this;
-        return new InsertQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["InsertQueryBuilder"](this);
     }
     /**
      * Creates UPDATE query and applies given update values.
@@ -105,10 +104,9 @@ export class QueryBuilder {
         this.expressionMap.queryType = "update";
         this.expressionMap.valuesSet = updateSet;
         // loading it dynamically because of circular issue
-        const UpdateQueryBuilderCls = require("./UpdateQueryBuilder").UpdateQueryBuilder;
         if (InstanceChecker.isUpdateQueryBuilder(this))
             return this;
-        return new UpdateQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["UpdateQueryBuilder"](this);
     }
     /**
      * Creates DELETE query.
@@ -116,26 +114,23 @@ export class QueryBuilder {
     delete() {
         this.expressionMap.queryType = "delete";
         // loading it dynamically because of circular issue
-        const DeleteQueryBuilderCls = require("./DeleteQueryBuilder").DeleteQueryBuilder;
         if (InstanceChecker.isDeleteQueryBuilder(this))
             return this;
-        return new DeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["DeleteQueryBuilder"](this);
     }
     softDelete() {
         this.expressionMap.queryType = "soft-delete";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["SoftDeleteQueryBuilder"](this);
     }
     restore() {
         this.expressionMap.queryType = "restore";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["SoftDeleteQueryBuilder"](this);
     }
     /**
      * Sets entity's relation with which this query builder gonna work.
@@ -152,10 +147,9 @@ export class QueryBuilder {
             this.expressionMap.setMainAlias(mainAlias);
         }
         // loading it dynamically because of circular issue
-        const RelationQueryBuilderCls = require("./RelationQueryBuilder").RelationQueryBuilder;
         if (InstanceChecker.isRelationQueryBuilder(this))
             return this;
-        return new RelationQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["RelationQueryBuilder"](this);
     }
     /**
      * Checks if given relation or relations exist in the entity.
@@ -1120,6 +1114,9 @@ export class QueryBuilder {
     hasCommonTableExpressions() {
         return this.expressionMap.commonTableExpressions.length > 0;
     }
+    static registerQueryBuilderClass(name, factory) {
+        QueryBuilder.queryBuilderRegistry[name] = factory
+    }
 }
 
 //# sourceMappingURL=QueryBuilder.js.map
diff --git a/browser/query-builder/index.js b/browser/query-builder/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..794b3a665ac2b64a8ec42e64bca6b27b34d5cd5f
--- /dev/null
+++ b/browser/query-builder/index.js
@@ -0,0 +1,34 @@
+import { DeleteQueryBuilder } from "./DeleteQueryBuilder"
+import { InsertQueryBuilder } from "./InsertQueryBuilder"
+import { QueryBuilder } from "./QueryBuilder"
+import { RelationQueryBuilder } from "./RelationQueryBuilder"
+import { SelectQueryBuilder } from "./SelectQueryBuilder"
+import { SoftDeleteQueryBuilder } from "./SoftDeleteQueryBuilder"
+import { UpdateQueryBuilder } from "./UpdateQueryBuilder"
+
+export function registerQueryBuilders() {
+    QueryBuilder.registerQueryBuilderClass(
+        "DeleteQueryBuilder",
+        (qb) => new DeleteQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "InsertQueryBuilder",
+        (qb) => new InsertQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "RelationQueryBuilder",
+        (qb) => new RelationQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "SelectQueryBuilder",
+        (qb) => new SelectQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "SoftDeleteQueryBuilder",
+        (qb) => new SoftDeleteQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "UpdateQueryBuilder",
+        (qb) => new UpdateQueryBuilder(qb),
+    )
+}
\ No newline at end of file
diff --git a/data-source/DataSource.js b/data-source/DataSource.js
index 1aedd237abde0c8f75d8852b5c49c43b82a216c2..856007fe64a923c24de131d73a90380c7af408ba 100644
--- a/data-source/DataSource.js
+++ b/data-source/DataSource.js
@@ -16,6 +16,9 @@ const ObjectUtils_1 = require("../util/ObjectUtils");
 const RelationIdLoader_1 = require("../query-builder/RelationIdLoader");
 const DriverUtils_1 = require("../driver/DriverUtils");
 const InstanceChecker_1 = require("../util/InstanceChecker");
+const { registerQueryBuilders } = require("../query-builder")
+
+registerQueryBuilders()
 /**
  * DataSource is a pre-defined connection configuration to a specific database.
  * You can have multiple data sources connected (with multiple connections in it),
diff --git a/query-builder/QueryBuilder.js b/query-builder/QueryBuilder.js
index 0176a13ccf2c86923c4ed291395e535c3e13feda..d7b2717fa189e3299fb4fcbd0e2e3ffde329321a 100644
--- a/query-builder/QueryBuilder.js
+++ b/query-builder/QueryBuilder.js
@@ -35,6 +35,7 @@ class QueryBuilder {
          * Memo to help keep place of current parameter index for `createParameter`
          */
         this.parameterIndex = 0;
+        this.queryBuilderRegistry = {};
         if (InstanceChecker_1.InstanceChecker.isDataSource(connectionOrQueryBuilder)) {
             this.connection = connectionOrQueryBuilder;
             this.queryRunner = queryRunner;
@@ -74,10 +75,9 @@ class QueryBuilder {
             ];
         }
         // loading it dynamically because of circular issue
-        const SelectQueryBuilderCls = require("./SelectQueryBuilder").SelectQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isSelectQueryBuilder(this))
             return this;
-        return new SelectQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["SelectQueryBuilder"](this);
     }
     /**
      * Creates INSERT query.
@@ -85,10 +85,9 @@ class QueryBuilder {
     insert() {
         this.expressionMap.queryType = "insert";
         // loading it dynamically because of circular issue
-        const InsertQueryBuilderCls = require("./InsertQueryBuilder").InsertQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isInsertQueryBuilder(this))
             return this;
-        return new InsertQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["InsertQueryBuilder"](this);
     }
     /**
      * Creates UPDATE query and applies given update values.
@@ -108,10 +107,9 @@ class QueryBuilder {
         this.expressionMap.queryType = "update";
         this.expressionMap.valuesSet = updateSet;
         // loading it dynamically because of circular issue
-        const UpdateQueryBuilderCls = require("./UpdateQueryBuilder").UpdateQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isUpdateQueryBuilder(this))
             return this;
-        return new UpdateQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["UpdateQueryBuilder"](this);
     }
     /**
      * Creates DELETE query.
@@ -119,26 +117,23 @@ class QueryBuilder {
     delete() {
         this.expressionMap.queryType = "delete";
         // loading it dynamically because of circular issue
-        const DeleteQueryBuilderCls = require("./DeleteQueryBuilder").DeleteQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isDeleteQueryBuilder(this))
             return this;
-        return new DeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["DeleteQueryBuilder"](this);
     }
     softDelete() {
         this.expressionMap.queryType = "soft-delete";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["SoftDeleteQueryBuilder"](this);
     }
     restore() {
         this.expressionMap.queryType = "restore";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["SoftDeleteQueryBuilder"](this);
     }
     /**
      * Sets entity's relation with which this query builder gonna work.
@@ -155,10 +150,9 @@ class QueryBuilder {
             this.expressionMap.setMainAlias(mainAlias);
         }
         // loading it dynamically because of circular issue
-        const RelationQueryBuilderCls = require("./RelationQueryBuilder").RelationQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isRelationQueryBuilder(this))
             return this;
-        return new RelationQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry["RelationQueryBuilder"](this);
     }
     /**
      * Checks if given relation or relations exist in the entity.
@@ -1123,6 +1117,9 @@ class QueryBuilder {
     hasCommonTableExpressions() {
         return this.expressionMap.commonTableExpressions.length > 0;
     }
+    static registerQueryBuilderClass(name, factory) {
+      QueryBuilder.queryBuilderRegistry[name] = factory
+    }
 }
 exports.QueryBuilder = QueryBuilder;
 
diff --git a/query-builder/index.js b/query-builder/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..794b3a665ac2b64a8ec42e64bca6b27b34d5cd5f
--- /dev/null
+++ b/query-builder/index.js
@@ -0,0 +1,34 @@
+import { DeleteQueryBuilder } from "./DeleteQueryBuilder"
+import { InsertQueryBuilder } from "./InsertQueryBuilder"
+import { QueryBuilder } from "./QueryBuilder"
+import { RelationQueryBuilder } from "./RelationQueryBuilder"
+import { SelectQueryBuilder } from "./SelectQueryBuilder"
+import { SoftDeleteQueryBuilder } from "./SoftDeleteQueryBuilder"
+import { UpdateQueryBuilder } from "./UpdateQueryBuilder"
+
+export function registerQueryBuilders() {
+    QueryBuilder.registerQueryBuilderClass(
+        "DeleteQueryBuilder",
+        (qb) => new DeleteQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "InsertQueryBuilder",
+        (qb) => new InsertQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "RelationQueryBuilder",
+        (qb) => new RelationQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "SelectQueryBuilder",
+        (qb) => new SelectQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "SoftDeleteQueryBuilder",
+        (qb) => new SoftDeleteQueryBuilder(qb),
+    )
+    QueryBuilder.registerQueryBuilderClass(
+        "UpdateQueryBuilder",
+        (qb) => new UpdateQueryBuilder(qb),
+    )
+}
\ No newline at end of file
